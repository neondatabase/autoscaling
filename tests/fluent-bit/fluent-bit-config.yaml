# tests/fluent-bit/fluent-bit-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: kube-system
  labels:
    app.kubernetes.io/name: fluent-bit
data:
  # Configuration files: server, input, filters and output
  # ======================================================
  fluent-bit.conf: |
    [SERVICE]
        Flush             1
        Log_Level         info
        Daemon            off
        Parsers_File      parsers.conf
        HTTP_Server       On
        HTTP_Listen       0.0.0.0
        HTTP_Port         2020
        storage.path      /var/log/flb-storage/
        storage.sync      normal
        storage.checksum  off
        storage.backlog.mem_limit 5M

    @INCLUDE input-kubernetes.conf
    @INCLUDE filter-kubernetes.conf
    @INCLUDE filter-lua.conf
    @INCLUDE filter-rewrite-tag.conf
    @INCLUDE filter-format.conf
    @INCLUDE output-file.conf

  input-kubernetes.conf: |
    [INPUT]
        Name              tail
        Tag               kube.*
        Path              /var/log/containers/*.log
        multiline.parser  docker, cri
        DB                /var/log/flb-storage/flb_kube.db
        Mem_Buf_Limit     5MB
        Skip_Long_Lines   On
        Refresh_Interval  10
        #storage.type      filesystem # Enable if using storage.path in SERVICE

  filter-kubernetes.conf: |
    [FILTER]
        Name              kubernetes
        Match             kube.*
        Kube_URL          https://kubernetes.default.svc:443
        Kube_CA_File      /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File   /var/run/secrets/kubernetes.io/serviceaccount/token
        Kube_Tag_Prefix   kube.var.log.containers.
        Merge_Log         On
        Merge_Log_Key     log_processed
        K8S-Logging.Parser On
        K8S-Logging.Exclude Off
        # Optionally turn On to include annotations
        Annotations       On

  filter-lua.conf: |
    [FILTER]
        Name              lua
        Match             kube.*
        Script            add_timestamp.lua
        Call              add_timestamp

  filter-rewrite-tag.conf: |
    [FILTER]
        Name                rewrite_tag
        Match               kube.*
        # Rule format: KEY REGEX NEW_TAG KEEP
        # Create tag like: pod.POD_NAME (Namespace omitted due to syntax limits)
        # $kubernetes['pod_name'] - The key containing the pod name.
        # ^(.+)$ - Regex matching any non-empty pod name (captures it).
        # pod.$1 - The new tag format. $1 is the captured pod name.
        # Keep - Keep the original record after rewriting the tag.
        Rule  $kubernetes['pod_name'] ^(.+)$ pod.$pod_timestamp.$1 true
        Emitter_Name re_emitted

  filter-format.conf: |
    [FILTER]
        Name              lua
        Match             pod.*
        Script            format_log.lua
        Call              format_log

  output-file.conf: |
    [OUTPUT]
        Name              file
        Match             pod.*
        Path              /logs/
        # File key removed, filename defaults to rewritten tag
        # Use template format to output formatted log
        Format            template
        Template          {prefix} {log_processed}

  parsers.conf: |
    [PARSER]
        Name              json
        Format            json
        Time_Key          time
        Time_Format       %Y-%m-%dT%H:%M:%S.%L%z

    [PARSER]
        Name              docker
        Format            json
        Time_Key          time
        Time_Format       %Y-%m-%dT%H:%M:%S.%L%z

    [PARSER]
        Name              cri
        Format            regex
        Regex             ^(?<time>[^ ]+) (?<stream>stdout|stderr) (?<logtag>[^ ]*) (?<log>.*)$
        Time_Key          time
        Time_Format       %Y-%m-%dT%H:%M:%S.%L%z 

  add_timestamp.lua: |
    -- Global table to store first timestamp per pod
    pod_timestamps = pod_timestamps or {}

    function add_timestamp(tag, timestamp, record)
        local pod_name = record["kubernetes"]["pod_name"]

        -- If we haven't seen this pod before, store its first timestamp  
        if not pod_timestamps[pod_name] then
            pod_timestamps[pod_name] = os.date("%y-%m-%d.%H-%M-%S", timestamp)
        end

        -- Use the stored timestamp for this pod
        record["pod_timestamp"] = pod_timestamps[pod_name]
        return 1, timestamp, record
    end

  format_log.lua: |
    function format_log(tag, timestamp, record)
        local log = record["log_processed"]
        if not log then
            log = record["log"]
            record["log_processed"] = log
        end

        local time_str = os.date("%Y-%m-%d %H:%M:%S", timestamp)
        local msg = log["msg"]
        if not msg and log["fields"] and log["fields"]["message"] then
            msg = log["fields"]["message"]
        end

        if not msg then
            msg = log
        end

        record["prefix"] = time_str .. " " .. tostring(msg)

        return 1, timestamp, record
    end
