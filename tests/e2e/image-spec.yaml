# Input to vm-builder to add vm-monitor and cgroups
---
commands:
  - name: cgconfigparser
    user: root
    sysvInitAction: sysinit
    shell: 'cgconfigparser -l /etc/cgconfig.conf -s 1664'
  - name: vm-monitor
    user: vm-monitor
    sysvInitAction: respawn
    shell: 'RUST_LOG=info /usr/local/bin/vm-monitor --addr "0.0.0.0:10301" --cgroup=neon-postgres'
  - name: pgbouncer
    user: nobody
    sysvInitAction: respawn
    shell: '/usr/local/bin/pgbouncer /etc/pgbouncer.ini'
  - name: postgres-exporter
    user: nobody
    sysvInitAction: respawn
    shell: 'DATA_SOURCE_NAME="user=cloud_admin sslmode=disable dbname=postgres" /bin/postgres_exporter'

files:
  - filename: cgconfig.conf
    content: |
      group neon-postgres {
          perm {
              admin {
                  uid = vm-monitor;
              }
              task {
                  gid = users;
              }
          }
          memory {}
      }
  - filename: pgbouncer.ini
    content: |
      [databases]
      *=host=localhost port=5432 auth_user=cloud_admin
      [pgbouncer]
      listen_port=6432
      listen_addr=0.0.0.0
      auth_type=scram-sha-256
      auth_user=cloud_admin
      auth_dbname=postgres
      client_tls_sslmode=disable
      server_tls_sslmode=disable
      pool_mode=transaction
      max_client_conn=10000
      default_pool_size=16
      max_prepared_statements=0

build: |
  # Build vm-monitor
  # We use cargo-chef to help with caching here, so that minor changes to neondatabase/neon don't
  # require rebuilding heavy dependencies at least.
  FROM lukemathwalker/cargo-chef:latest-rust-1.79.0-alpine AS chef
  RUN apk add musl-dev git openssl-dev
  WORKDIR /workspace

  FROM chef AS neon-src
  # Which branch to pull from
  ENV BRANCH main
  # Ensures we reclone upon new commits
  # https://stackoverflow.com/questions/35134713
  ADD "https://api.github.com/repos/neondatabase/neon/commits/$BRANCH" latest_commit
  # Clone, but remove rust-toolchain.toml so that we don't redo work if the versions are out of sync
  RUN git clone --depth 1 --branch $BRANCH https://github.com/neondatabase/neon.git \
    && rm -f rust-toolchain.toml
  WORKDIR /workspace/neon

  FROM neon-src AS monitor-planner
  RUN cargo chef prepare --bin vm-monitor --recipe-path ../recipe.json

  FROM chef AS monitor-builder
  COPY --from=monitor-planner /workspace/recipe.json /workspace/recipe.json
  WORKDIR /workspace/neon
  # THIS WILL BE CACHED: Build deps.
  RUN cargo chef cook --release -p vm_monitor --recipe-path ../recipe.json && \
    mv target ../target
  # ... and *now* copy over the current source.
  COPY --from=neon-src /workspace/neon .
  # Build vm-monitor and 'cargo clean' so we don't explode the size of cached layers.
  RUN mv ../target target \
    && cargo build --release -p vm_monitor \
    && mkdir -p /workspace/bin \
    && cp /workspace/neon/target/release/vm-monitor /workspace/bin \
    && cargo clean

  # Build cgroup-tools
  #
  # At time of writing (2023-03-14), debian bullseye has a version of cgroup-tools (technically
  # libcgroup) that doesn't support cgroup v2 (version 0.41-11). Unfortunately, the vm-monitor
  # requires cgroup v2, so we'll build cgroup-tools ourselves.
  FROM debian:bullseye-slim as libcgroup-builder
  ENV LIBCGROUP_VERSION v2.0.3

  RUN set -exu \
      && apt update \
      && apt install --no-install-recommends -y \
          git \
          ca-certificates \
          automake \
          cmake \
          make \
          gcc \
          byacc \
          flex \
          libtool \
          libpam0g-dev \
      && git clone --depth 1 -b $LIBCGROUP_VERSION https://github.com/libcgroup/libcgroup \
      && INSTALL_DIR="/libcgroup-install" \
      && mkdir -p "$INSTALL_DIR/bin" "$INSTALL_DIR/include" \
      && cd libcgroup \
      # extracted from bootstrap.sh, with modified flags:
      && (test -d m4 || mkdir m4) \
      && autoreconf -fi \
      && rm -rf autom4te.cache \
      && CFLAGS="-O3" ./configure --prefix="$INSTALL_DIR" --sysconfdir=/etc --localstatedir=/var --enable-opaque-hierarchy="name=systemd" \
      # actually build the thing...
      && make install

  FROM quay.io/prometheuscommunity/postgres-exporter:v0.12.0 AS postgres-exporter

  # Build pgbouncer
  #
  FROM debian:bullseye-slim AS pgbouncer
  RUN set -e \
      && apt-get update \
      && apt-get install -y \
          curl \
          build-essential \
          pkg-config \
          libevent-dev \
          libssl-dev

  ENV PGBOUNCER_VERSION 1.21.0
  ENV PGBOUNCER_GITPATH 1_21_0
  RUN set -e \
      && curl -sfSL https://github.com/pgbouncer/pgbouncer/releases/download/pgbouncer_${PGBOUNCER_GITPATH}/pgbouncer-${PGBOUNCER_VERSION}.tar.gz -o pgbouncer-${PGBOUNCER_VERSION}.tar.gz \
      && tar xzvf pgbouncer-${PGBOUNCER_VERSION}.tar.gz \
      && cd pgbouncer-${PGBOUNCER_VERSION} \
      && LDFLAGS=-static ./configure --prefix=/usr/local/pgbouncer --without-openssl \
      && make -j $(nproc) \
      && make install

merge: |
  RUN adduser --system --disabled-login --no-create-home --home /nonexistent --gecos "monitor user" --shell /bin/false vm-monitor

  COPY cgconfig.conf /etc/cgconfig.conf
  COPY pgbouncer.ini /etc/pgbouncer.ini

  RUN set -e \
        && chown postgres:postgres /etc/pgbouncer.ini \
        && chmod 0644 /etc/pgbouncer.ini \
        && chmod 0644 /etc/cgconfig.conf

  COPY --from=monitor-builder   /workspace/bin/vm-monitor /usr/local/bin/vm-monitor
  COPY --from=libcgroup-builder /libcgroup-install/bin/*  /usr/bin/
  COPY --from=libcgroup-builder /libcgroup-install/lib/*  /usr/lib/
  COPY --from=libcgroup-builder /libcgroup-install/sbin/* /usr/sbin/
  COPY --from=postgres-exporter /bin/postgres_exporter /bin/postgres_exporter
  COPY --from=pgbouncer         /usr/local/pgbouncer/bin/pgbouncer /usr/local/bin/pgbouncer
