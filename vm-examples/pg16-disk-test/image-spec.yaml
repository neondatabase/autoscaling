# Input to vm-builder
---
commands:
  - name: cgconfigparser
    user: root
    sysvInitAction: sysinit
    shell: '/usr/sbin/cgconfigparser -l /etc/cgconfig.conf -s 1664'
  - name: postgres-data
    user: root
    sysvInitAction: sysinit
    shell: 'mkdir -p /run/postgresql && chown -R postgres:postgres /run/postgresql'
  - name: vm-monitor
    user: vm-monitor
    sysvInitAction: respawn
    shell: 'RUST_LOG=info /bin/vm-monitor --cgroup=neon-test --addr="0.0.0.0:10301"'
  - name: start-postgres
    user: postgres
    sysvInitAction: once
    shell: 'PGDATA=/var/lib/postgresql pg_ctl start -o "-c config_file=/etc/postgresql.conf -c hba_file=/etc/pg_hba.conf" -l /dev/virtio-ports/tech.neon.log.0'
files:
  - filename: postgresql.conf
    hostPath: postgresql.conf
  - filename: pg_hba.conf
    hostPath: pg_hba.conf
  - filename: allocate-loop.c
    hostPath: allocate-loop.c
  - filename: cgconfig.conf
    hostPath: cgconfig.conf
build: |
  # Build vm-monitor
  FROM rust:1.74-alpine as monitor-builder
  WORKDIR /workspace

  RUN apk add musl-dev git openssl-dev

  # Which branch to pull from
  ENV BRANCH main

  # Ensures we reclone upon new commits
  # https://stackoverflow.com/questions/35134713
  ADD "https://api.github.com/repos/neondatabase/neon/commits/$BRANCH" latest_commit

  RUN git clone --depth 1 --branch $BRANCH https://github.com/neondatabase/neon.git
  RUN cargo build --release --manifest-path neon/libs/vm_monitor/Cargo.toml
  # Move binary so we can cargo clean
  RUN mkdir -p /workspace/bin && cp /workspace/neon/target/release/vm-monitor /workspace/bin
  # Cargo clean dramatically reduces the size of the image
  RUN cargo clean --release --manifest-path neon/libs/vm_monitor/Cargo.toml

  # Build the allocation tester:
  FROM alpine:3.16 AS allocate-loop-builder
  RUN set -e \
      && apk add gcc musl-dev
  COPY allocate-loop.c allocate-loop.c
  RUN set -e \
      && gcc -g -O allocate-loop.c -o /bin/allocate-loop

merge: |
  RUN adduser vm-monitor --disabled-password --no-create-home

  COPY cgconfig.conf         /etc/cgconfig.conf
  COPY postgresql.conf       /etc/postgresql.conf
  COPY pg_hba.conf           /etc/pg_hba.conf

  # General tools
  RUN set -e \
      && apk add --no-cache \
              ca-certificates \
              util-linux-misc \
              coreutils \
              cgroup-tools

  # postgresql stuff
  RUN set -e \
        && apk add --no-cache \
                su-exec \
                postgresql16

  # Initialize postgres
  ENV PGDATA /var/lib/postgresql
  RUN set -e \
      && mkdir -p ${PGDATA} /run/postgresql \
      && chown -R postgres:postgres ${PGDATA} /run/postgresql \
      && su-exec postgres pg_ctl init

  COPY --from=allocate-loop-builder /bin/allocate-loop        /bin/allocate-loop
  COPY --from=monitor-builder       /workspace/bin/vm-monitor /bin/vm-monitor

  # set the greeting message on ssh logins
  RUN echo -e 'Welcome to Alpine!\n ~ This is the VM :) ~' >/etc/motd
