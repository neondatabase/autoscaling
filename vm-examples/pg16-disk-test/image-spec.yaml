# Input to vm-builder
---
commands:
  - name: cgconfigparser
    user: root
    sysvInitAction: sysinit
    shell: '/usr/sbin/cgconfigparser -l /etc/cgconfig.conf -s 1664'
  - name: postgres-data
    user: root
    sysvInitAction: sysinit
    shell: 'mkdir -p /run/postgresql && chown -R postgres:postgres /run/postgresql'
  - name: vm-monitor
    user: vm-monitor
    sysvInitAction: respawn
    shell: 'RUST_LOG=info /bin/vm-monitor --cgroup=neon-test --addr="0.0.0.0:10301"'
  - name: create-fifo
    user: root
    sysvInitAction: wait
    shell: 'mkfifo -m 0666 /tmp/neon-logs.fifo'
  - name: log-redirect
    user: root
    sysvInitAction: respawn
    shell: 'cat /tmp/neon-logs.fifo > /dev/virtio-ports/tech.neon.log.0'
  - name: start-postgres
    user: postgres
    sysvInitAction: once
    shell: 'PGDATA=/var/lib/postgresql pg_ctl start -o "-c config_file=/etc/postgresql.conf -c hba_file=/etc/pg_hba.conf" -l /tmp/neon-logs.fifo'
files:
  - filename: postgresql.conf
    hostPath: postgresql.conf
  - filename: pg_hba.conf
    hostPath: pg_hba.conf
  - filename: allocate-loop.c
    hostPath: allocate-loop.c
  - filename: cgconfig.conf
    hostPath: cgconfig.conf
build: |
  # Build vm-monitor
  # We use cargo-chef to help with caching here, so that minor changes to neondatabase/neon don't
  # require rebuilding heavy dependencies at least.
  FROM lukemathwalker/cargo-chef:latest-rust-1.79.0-alpine AS chef
  RUN apk add musl-dev git openssl-dev
  WORKDIR /workspace

  FROM chef AS neon-src
  # Which branch to pull from
  ENV BRANCH main
  # Ensures we reclone upon new commits
  # https://stackoverflow.com/questions/35134713
  ADD "https://api.github.com/repos/neondatabase/neon/commits/$BRANCH" latest_commit
  # Clone, but remove rust-toolchain.toml so that we don't redo work if the versions are out of sync
  RUN git clone --depth 1 --branch $BRANCH https://github.com/neondatabase/neon.git \
    && rm -f rust-toolchain.toml
  WORKDIR /workspace/neon

  FROM neon-src AS monitor-planner
  RUN cargo chef prepare --bin vm-monitor --recipe-path ../recipe.json

  FROM chef AS monitor-builder
  COPY --from=monitor-planner /workspace/recipe.json /workspace/recipe.json
  WORKDIR /workspace/neon
  # THIS WILL BE CACHED: Build deps.
  # Note that we must use '-p vm_monitor' rather than '--bin vm-monitor' because for some reason
  # using --bin requires more dependencies. In our case, it also includes the giant aws crates, so
  # it's particularly worthwhile to make sure they aren't being compiled...
  #
  # This appears to be an issue with cargo itself, rather than cargo-chef, but I (@sharnoff)
  # couldn't tell whether there was already a related issue open, and didn't feel like trying to
  # reproduce it.
  # Written 2024-06-23, rust 1.79.0.
  RUN cargo chef cook --release -p vm_monitor --recipe-path ../recipe.json && \
    mv target ../target
  # ... and *now* copy over the current source. We need to do it after building deps, otherwise
  # we'll be invalidating the cache for building dependencies.
  COPY --from=neon-src /workspace/neon .
  # Build vm-monitor and 'cargo clean' so we don't explode the size of cached layers.
  RUN mv ../target target \
    && cargo build --release -p vm_monitor \
    && mkdir -p /workspace/bin \
    && cp /workspace/neon/target/release/vm-monitor /workspace/bin \
    && cargo clean

  # Build the allocation tester:
  FROM alpine:3.16 AS allocate-loop-builder
  RUN set -e \
      && apk add gcc musl-dev
  COPY allocate-loop.c allocate-loop.c
  RUN set -e \
      && gcc -g -O allocate-loop.c -o /bin/allocate-loop

merge: |
  RUN adduser vm-monitor --disabled-password --no-create-home

  COPY cgconfig.conf         /etc/cgconfig.conf
  COPY postgresql.conf       /etc/postgresql.conf
  COPY pg_hba.conf           /etc/pg_hba.conf

  # General tools
  RUN set -e \
      && apk add --no-cache \
              ca-certificates \
              util-linux-misc \
              coreutils \
              cgroup-tools

  # postgresql stuff
  RUN set -e \
        && apk add --no-cache \
                su-exec \
                postgresql16

  # Initialize postgres
  ENV PGDATA /var/lib/postgresql
  RUN set -e \
      && mkdir -p ${PGDATA} /run/postgresql \
      && chown -R postgres:postgres ${PGDATA} /run/postgresql \
      && su-exec postgres pg_ctl init

  COPY --from=allocate-loop-builder /bin/allocate-loop        /bin/allocate-loop
  COPY --from=monitor-builder       /workspace/bin/vm-monitor /bin/vm-monitor

  # set the greeting message on ssh logins
  RUN echo -e 'Welcome to Alpine!\n ~ This is the VM :) ~' >/etc/motd
