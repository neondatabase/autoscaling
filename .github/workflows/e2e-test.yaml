name: e2e-test
on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      kernel-image:
        type: string
        description: 'The kernel image to use for the VMs. If not specified, a kernel will be built from source'
        required: false
  workflow_call:
    inputs:
      kernel-image:
        type: string
        description: 'The kernel image to use for the VMs'
        required: false

jobs:
  e2e-tests:
    strategy:
      fail-fast: false
      matrix:
        cluster:
          - k3d
          - kind
    runs-on: [ self-hosted, gen3, small ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all, so that we also include tags

      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
        # Sometimes setup-go gets stuck. Without this, it'll keep going until the job gets killed
        timeout-minutes: 5

      - uses: docker/setup-buildx-action@v2

      - name: Install dependencies
        run: |
          make e2e-tools
          echo $(pwd)/bin >> $GITHUB_PATH

      - name: Check dependencies
        run: |
          kubectl version --client --output=yaml
          k3d version
          kind version
          kuttl version
          docker version
          docker buildx version

      - name: Build Linux kernel
        if: inputs.kernel-image == ''
        uses: docker/build-push-action@v3
        with:
          build-args: KERNEL_VERSION=${{ env.VM_KERNEL_VERSION }}
          context: neonvm/hack
          platforms: linux/amd64
          push: false
          load: true
          pull: true
          no-cache: true
          file: neonvm/hack/Dockerfile.kernel-builder
          tags: ${{ env.VM_KERNEL_IMAGE }}:${{ env.VM_KERNEL_VERSION }}-${{ matrix.cluster }}-${{ github.run_id}}-${{ github.run_attempt }}
        env:
          VM_KERNEL_IMAGE:   "neondatabase/local-vm-kernel"
          VM_KERNEL_VERSION: "6.1.63"

      - name: Load VM kernel
        run: |
          if [ -z "${{ inputs.kernel-image }}" ]; then
            IMAGE="${VM_KERNEL_IMAGE}:${VM_KERNEL_VERSION}-${{ matrix.cluster }}-${{ github.run_id}}-${{ github.run_attempt }}"
          else
            IMAGE="${{ inputs.kernel-image }}"
            docker pull --quiet $IMAGE
          fi

          ID=$(docker create ${IMAGE} true)
          docker cp ${ID}:/vmlinuz neonvm/hack/vmlinuz
          docker rm -f ${ID}
        env:
          VM_KERNEL_IMAGE:   "neondatabase/local-vm-kernel"
          VM_KERNEL_VERSION: "6.1.63"

      # our docker builds use the output of 'git describe' for embedding git information
      - run: git describe --long --dirty

      # Explicitly build all the images beforehand. Building images while the cluster is up can
      # sometimes affect the cluster. For more information:
      # https://github.com/neondatabase/autoscaling/issues/120#issuecomment-1493405844
      - run: make build
      - run: make docker-build
      - run: make docker-build-examples

      - run: make ${{ matrix.cluster }}-setup

      - run: make deploy
        timeout-minutes: 10
      - run: make example-vms
        timeout-minutes: 10
      - run: make e2e
        timeout-minutes: 15

      - name: Get k8s logs and events
        if: always()
        run: |
          if ! kubectl config current-context; then
            echo "skipping cluster logs because no cluster found in kubectl context"
            exit 0
          fi

          namespaces=$(kubectl get namespaces -o jsonpath='{.items[*].metadata.name}')
          for namespace in $namespaces; do
            if [[ "$namespace" == "neonvm-system" ]] || [[ "$namespace" == kuttl-test-* ]]; then
              tee_if_needed=$GITHUB_STEP_SUMMARY
            else
              tee_if_needed=/dev/null
            fi

            {
              echo "<details>"
              echo "<summary>Namespace=$namespace</summary>"
            } | tee -a $tee_if_needed

            pods=$(kubectl get pods -n $namespace -o jsonpath='{.items[*].metadata.name}')
            for pod in $pods; do
              {
                echo "<details>"
                echo "<summary>- Namespace=$namespace Pod=$pod Logs</summary>"
                echo "<pre>"
              } | tee -a $tee_if_needed

              restarts=$(
                kubectl get pod -n $namespace $pod -o jsonpath='{.status.containerStatuses[0].restartCount}' || echo '0'
              )
              {
                if [ "$restarts" -ne 0 ]; then
                  echo "CONTAINER RESTARTED $restarts TIME(S)"
                  echo "Previous logs:"
                  kubectl logs -n $namespace -p $pod || echo 'Error getting logs'
                  echo "Current logs:"
                  kubectl logs -n $namespace $pod || echo 'Error getting logs'
                else
                  echo "Logs:"
                  kubectl logs -n $namespace $pod || echo 'Error getting logs'
                fi
              } | tee -a $tee_if_needed
              {
                echo "</pre>"
                echo "</details>"
              } | tee -a $tee_if_needed

              {
                echo "<details>"
                echo "<summary>- Namespace=$namespace Pod=$pod Events</summary>"
                echo "<pre>"
              } | tee -a $tee_if_needed

              (kubectl get events --namespace $namespace --field-selector involvedObject.name=$pod || echo 'Error getting events') | tee -a $tee_if_needed

              {
                echo "</pre>"
                echo "</pre>"
                echo "</details>"
              } | tee -a $tee_if_needed
            done

            echo "</details>" | tee -a $tee_if_needed
          done

      - name: Cleanup
        if: always()
        run: make ${{ matrix.cluster }}-destroy
