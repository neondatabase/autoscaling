name: build-images

on:
  workflow_call:
    inputs:
      # 'skip' is kind of silly. it exists because we can't actually *skip* this job from e2e-test,
      # otherwise the follow-up job that needs it wouldn't be able to run. So instead we pretend the
      # job completed successfully, but actually do nothing...
      skip:
        description: 'Changes this action to perform a no-op'
        type: boolean
        required: false
      tag:
        description: 'Tag to use for the Docker images'
        type: string
        required: true
      kernel-image:
        description: 'Kernel image for the VMs embedded in neonvm-runner. If not specified, a kernel will be built from source'
        type: string
        required: false
      controller-preserve-runner-pods:
        description: 'ONLY USE FOR E2E TESTS: Set neonvm-controller to never delete VM runner pods'
        type: boolean
        required: false
      upload-to-ecr-acr:
        description: 'Should images be uploaded to neon ECR'
        type: boolean
        required: false
      archs:
        description: 'Architectures to build for'
        type: string
        required: false
        default: '["amd64","arm64"]'

    outputs:

      controller:
        description: 'neonvm-controller image'
        value: ${{ jobs.tags.outputs.controller }}
      vxlan-controller:
        description: 'neonvm-vxlan-controller image'
        value: ${{ jobs.tags.outputs.vxlan-controller }}
      runner:
        description: 'neonvm-runner image'
        value: ${{ jobs.tags.outputs.runner }}
      scheduler:
        description: 'autoscale-scheduler image'
        value: ${{ jobs.tags.outputs.scheduler }}
      autoscaler-agent:
        description: 'autoscaler-agent image'
        value: ${{ jobs.tags.outputs.autoscaler-agent }}
      daemon:
        description: 'neonvm-daemon image'
        value: ${{ jobs.tags.outputs.daemon }}
      cluster-autoscaler:
        description: 'cluster-autoscaler image'
        value: ${{ jobs.tags.outputs.cluster-autoscaler }}

env:
  IMG_CONTROLLER:         "neondatabase/neonvm-controller"
  IMG_VXLAN_CONTROLLER:   "neondatabase/neonvm-vxlan-controller"
  IMG_RUNNER:             "neondatabase/neonvm-runner"
  IMG_KERNEL:             "neondatabase/vm-kernel"
  IMG_SCHEDULER:          "neondatabase/autoscale-scheduler"
  IMG_AUTOSCALER_AGENT:   "neondatabase/autoscaler-agent"
  IMG_DAEMON:             "neondatabase/neonvm-daemon"
  IMG_CLUSTER_AUTOSCALER: "neondatabase/cluster-autoscaler-neonvm"
  ECR_DEV:                "369495373322.dkr.ecr.eu-central-1.amazonaws.com"
  ECR_PROD:               "093970136003.dkr.ecr.eu-central-1.amazonaws.com"

defaults:
  run:
    shell: bash -euo pipefail {0}

jobs:
  # note: this tags job must be separate and NOT skipped with inputs.skip, so that way the workflow
  # itself still succeeds, while not doing anything when called by the release workflow.
  tags:
    outputs:
      controller:         ${{ steps.show-tags.outputs.controller }}
      vxlan-controller:   ${{ steps.show-tags.outputs.vxlan-controller }}
      runner:             ${{ steps.show-tags.outputs.runner }}
      scheduler:          ${{ steps.show-tags.outputs.scheduler }}
      autoscaler-agent:   ${{ steps.show-tags.outputs.autoscaler-agent }}
      daemon:             ${{ steps.show-tags.outputs.daemon }}
      cluster-autoscaler: ${{ steps.show-tags.outputs.cluster-autoscaler }}
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - id: show-tags
        run: |
          echo "controller=${IMG_CONTROLLER}:${{ inputs.tag }}" | tee -a $GITHUB_OUTPUT
          echo "vxlan-controller=${IMG_VXLAN_CONTROLLER}:${{ inputs.tag }}" | tee -a $GITHUB_OUTPUT
          echo "runner=${IMG_RUNNER}:${{ inputs.tag }}" | tee -a $GITHUB_OUTPUT
          echo "scheduler=${IMG_SCHEDULER}:${{ inputs.tag }}" | tee -a $GITHUB_OUTPUT
          echo "autoscaler-agent=${IMG_AUTOSCALER_AGENT}:${{ inputs.tag }}" | tee -a $GITHUB_OUTPUT
          echo "daemon=${IMG_DAEMON}:${{ inputs.tag }}" | tee -a $GITHUB_OUTPUT
          echo "cluster-autoscaler=${IMG_CLUSTER_AUTOSCALER}:${{ inputs.tag }}" | tee -a $GITHUB_OUTPUT

  vm-kernel:
    # nb: use format(..) to catch both inputs.skip = true AND inputs.skip = 'true'.
    if: ${{ format('{0}', inputs.skip) != 'true' }}
    uses: ./.github/workflows/vm-kernel.yaml
    with:
      tag: ${{ inputs.kernel-image || inputs.tag }}
      return-image-for-tag: ${{ inputs.kernel-image }}
      archs: ${{ inputs.archs }}
    secrets: inherit

  build:
    # nb: use format(..) to catch both inputs.skip = true AND inputs.skip = 'true'.
    if: ${{ format('{0}', inputs.skip) != 'true' }}
    needs: [ vm-kernel ]
    env:
      # Why localhost? We use a local registry so that when docker/build-push-action tries to pull the
      # image we built locally, it'll actually have a place to pull from.
      #
      # Otherwise, if we just try to use a local image, it fails trying to pull it from dockerhub.
      # See https://github.com/moby/buildkit/issues/2343 for more information.
      GO_BASE_IMG: ${{ format('localhost:5000/neondatabase/autoscaling-go-base-{0}:dev', matrix.arch) }}
    permissions:
      contents: read  # This is required for actions/checkout
    strategy:
      matrix:
        arch: ${{ fromJson(inputs.archs) }}
    runs-on: ${{ fromJson(format('["self-hosted", "{0}"]', matrix.arch == 'arm64' && 'huge-arm64' || 'large')) }}

    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      # job level tags with arch and tag
      - id: tags
        run: |
          echo "controller=${IMG_CONTROLLER}-${{ matrix.arch }}:${{ inputs.tag }}" | tee -a $GITHUB_OUTPUT
          echo "vxlan-controller=${IMG_VXLAN_CONTROLLER}-${{ matrix.arch }}:${{ inputs.tag }}" | tee -a $GITHUB_OUTPUT
          echo "runner=${IMG_RUNNER}-${{ matrix.arch }}:${{ inputs.tag }}" | tee -a $GITHUB_OUTPUT
          echo "scheduler=${IMG_SCHEDULER}-${{ matrix.arch }}:${{ inputs.tag }}" | tee -a $GITHUB_OUTPUT
          echo "autoscaler-agent=${IMG_AUTOSCALER_AGENT}-${{ matrix.arch }}:${{ inputs.tag }}" | tee -a $GITHUB_OUTPUT
          echo "daemon=${IMG_DAEMON}-${{ matrix.arch }}:${{ inputs.tag }}" | tee -a $GITHUB_OUTPUT
          echo "cluster-autoscaler=${IMG_CLUSTER_AUTOSCALER}-${{ matrix.arch }}:${{ inputs.tag }}" | tee -a $GITHUB_OUTPUT

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: 'go.mod'
          # Disable cache on self-hosted runners to avoid /usr/bin/tar errors, see https://github.com/actions/setup-go/issues/403
          cache: false
        # Sometimes setup-go gets stuck. Without this, it'll keep going until the job gets killed
        timeout-minutes: 10

      # Use 'git describe' for embedding git information (duplicated from the Makefile)
      - name: get git info
        id: get-git-info
        run: |
          # note: --tags enables matching on lightweight (i.e. not annotated) tags, which normally
          # wouldn't be necessary, except that actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2 does weird things to setup the
          # repository that means that we actually end up checked out with *just* a lightweight tag
          # to the tagged commit.
          echo "info=$(git describe --tags --long --dirty)" >> $GITHUB_OUTPUT

      - name: set custom docker config directory
        uses: neondatabase/dev-actions/set-docker-config-dir@6094485bf440001c94a94a3f9e221e81ff6b6193

      - uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
        with:
          driver-opts: network=host

      - name: Login to Dockerhub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          username: ${{ secrets.NEON_DOCKERHUB_USERNAME }}
          password: ${{ secrets.NEON_DOCKERHUB_PASSWORD }}

      - name: Login to Docker cache registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: cache.neon.build
          username: ${{ secrets.NEON_CI_DOCKERCACHE_USERNAME }}
          password: ${{ secrets.NEON_CI_DOCKERCACHE_PASSWORD }}

      - name: Check dependencies
        run: |
          docker version
          docker buildx version

      - name: Load VM kernel
        env:
          IMAGE: ${{ needs.vm-kernel.outputs.image }}
        run: |
          docker pull --quiet $IMAGE
          ID=$(docker create $IMAGE true)
          docker cp ${ID}:/vmlinuz neonvm-kernel/vmlinuz
          docker rm -f ${ID}

      - name: Build go dependencies image
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        id: build-go-dependencies-image
        with:
          provenance: false
          sbom: false
          context: .
          push: true
          file: go-base.Dockerfile
          cache-from: ${{ format('type=registry,ref=cache.neon.build/autoscaling-go-base-{0}:cache', matrix.arch) }}
          cache-to: ${{ github.ref_name == 'main' && format('type=registry,ref=cache.neon.build/autoscaling-go-base-{0}:cache,mode=max', matrix.arch) || '' }}
          tags: ${{ env.GO_BASE_IMG }}

      - name: Build and push neonvm-runner image
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          provenance: false
          sbom: false
          context: .
          push: true
          file: neonvm-runner/Dockerfile
          cache-from: ${{ format('type=registry,ref=cache.neon.build/neonvm-runner-{0}:cache', matrix.arch) }}
          cache-to: ${{ github.ref_name == 'main' && format('type=registry,ref=cache.neon.build/neonvm-runner-{0}:cache,mode=max', matrix.arch) || '' }}
          tags: ${{ steps.tags.outputs.runner }}
          build-args: |
            GO_BASE_IMG=${{ env.GO_BASE_IMG }}

      - name: Generate neonvm-controller build tags
        id: controller-build-tags
        env:
          PRESERVE_RUNNER_PODS: ${{ inputs.controller-preserve-runner-pods }}
        run: |
          if [ "$PRESERVE_RUNNER_PODS" = 'true' ]; then
            echo "buildtags=nodelete" | tee -a $GITHUB_OUTPUT
          else
            echo "buildtags=" | tee -a $GITHUB_OUTPUT
          fi

      - name: Build and push neonvm-controller image
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          provenance: false
          sbom: false
          context: .
          push: true
          file: neonvm-controller/Dockerfile
          cache-from: ${{ format('type=registry,ref=cache.neon.build/neonvm-controller-{0}:cache', matrix.arch) }}
          cache-to: ${{ github.ref_name == 'main' && format('type=registry,ref=cache.neon.build/neonvm-controller-{0}:cache,mode=max', matrix.arch) || '' }}
          tags: ${{ steps.tags.outputs.controller }}
          build-args: |
            GO_BASE_IMG=${{ env.GO_BASE_IMG }}
            VM_RUNNER_IMAGE=${{ steps.tags.outputs.runner }}
            BUILDTAGS=${{ steps.controller-build-tags.outputs.buildtags }}

      - name: Build and push neonvm-vxlan-controller image
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          provenance: false
          sbom: false
          context: .
          push: true
          file: neonvm-vxlan-controller/Dockerfile
          cache-from: ${{ format('type=registry,ref=cache.neon.build/neonvm-vxlan-controller-{0}:cache', matrix.arch) }}
          cache-to: ${{ github.ref_name == 'main' && format('type=registry,ref=cache.neon.build/neonvm-vxlan-controller-{0}:cache,mode=max', matrix.arch) || '' }}
          tags: ${{ steps.tags.outputs.vxlan-controller }}
          build-args: |
            GO_BASE_IMG=${{ env.GO_BASE_IMG }}
            TARGET_ARCH=${{ matrix.arch }}

      - name: Build and push autoscale-scheduler image
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          provenance: false
          sbom: false
          context: .
          push: true
          file: autoscale-scheduler/Dockerfile
          cache-from: ${{ format('type=registry,ref=cache.neon.build/autoscale-scheduler-{0}:cache', matrix.arch) }}
          cache-to: ${{ github.ref_name == 'main' && format('type=registry,ref=cache.neon.build/autoscale-scheduler-{0}:cache,mode=max', matrix.arch) || '' }}
          tags: ${{ steps.tags.outputs.scheduler }}
          build-args: |
            GO_BASE_IMG=${{ env.GO_BASE_IMG }}
            GIT_INFO=${{ steps.get-git-info.outputs.info }}:${{ inputs.tag }}

      - name: Build and push autoscaler-agent image
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          provenance: false
          sbom: false
          context: .
          push: true
          file: autoscaler-agent/Dockerfile
          cache-from: ${{ format('type=registry,ref=cache.neon.build/autoscaler-agent-{0}:cache', matrix.arch) }}
          cache-to: ${{ github.ref_name == 'main' && format('type=registry,ref=cache.neon.build/autoscaler-agent-{0}:cache,mode=max', matrix.arch) || '' }}
          tags: ${{ steps.tags.outputs.autoscaler-agent }}
          build-args: |
            GO_BASE_IMG=${{ env.GO_BASE_IMG }}
            GIT_INFO=${{ steps.get-git-info.outputs.info }}

      - name: Build and push neonvm-daemon image
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          provenance: false
          sbom: false
          context: .
          push: true
          file: neonvm-daemon/Dockerfile
          cache-from: ${{ format('type=registry,ref=cache.neon.build/neonvm-daemon-{0}:cache', matrix.arch) }}
          cache-to: ${{ github.ref_name == 'main' && format('type=registry,ref=cache.neon.build/neonvm-daemon-{0}:cache,mode=max', matrix.arch) || '' }}
          tags: ${{ steps.tags.outputs.daemon }}
          build-args: |
            GO_BASE_IMG=${{ env.GO_BASE_IMG }}

      - name: Build and push cluster-autoscaler image
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          provenance: false
          sbom: false
          context: cluster-autoscaler
          push: true
          tags: ${{ steps.tags.outputs.cluster-autoscaler }}
          cache-from: ${{ format('type=registry,ref=cache.neon.build/cluster-autoscaler-neonvm-{0}:cache', matrix.arch) }}
          cache-to: ${{ github.ref_name == 'main' && format('type=registry,ref=cache.neon.build/cluster-autoscaler-neonvm-{0}:cache,mode=max', matrix.arch) || '' }}


  merge-images:
    permissions:
      id-token: write # This is required for aws-actions/configure-aws-credentials
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Login to Dockerhub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          username: ${{ secrets.NEON_DOCKERHUB_USERNAME }}
          password: ${{ secrets.NEON_DOCKERHUB_PASSWORD }}

      - name: Configure dev AWS credentials
        if: ${{ format('{0}', inputs.upload-to-ecr-acr) == 'true' }}
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-region: eu-central-1
          mask-aws-account-id: true
          role-to-assume: ${{ secrets.DEV_GHA_OIDC_ECR_ROLE }}

      - name: Login to dev ECR
        if: ${{ format('{0}', inputs.upload-to-ecr-acr) == 'true' }}
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.ECR_DEV }}

      - name: Configure prod AWS credentials
        if: ${{ format('{0}', inputs.upload-to-ecr-acr) == 'true' }}
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-region: eu-central-1
          mask-aws-account-id: true
          role-to-assume: ${{ secrets.PROD_GHA_OIDC_ECR_ROLE }}

      - name: Login to prod ECR
        if: ${{ format('{0}', inputs.upload-to-ecr-acr) == 'true' }}
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.ECR_PROD }}

      - name: Create multi-arch images
        env:
          ARCHS: ${{ join(fromJson(inputs.archs), ' ') }}
          TAG: ${{ inputs.tag }}
        run: |
          images=("${IMG_CONTROLLER}" \
          "${IMG_VXLAN_CONTROLLER}" \
          "${IMG_RUNNER}" \
          "${IMG_SCHEDULER}" \
          "${IMG_AUTOSCALER_AGENT}" \
          "${IMG_DAEMON}" \
          "${IMG_CLUSTER_AUTOSCALER}"
          )
          for image in "${images[@]}"; do
            tags=("-t" "$image:$TAG")
            for arch in ${ARCHS}; do
              tags+=("$image-$arch:$TAG")
            done
            docker buildx imagetools create "${tags[@]}"
          done

      - name: Copy all merged images to ECR
        if: ${{ format('{0}', inputs.upload-to-ecr-acr) == 'true' }}
        env:
          TAG: ${{ inputs.tag }}
        run: |
          # note: excludes neonvm-daemon because we only need it during CI, to build compute images.
          images=("${IMG_CONTROLLER}" \
          "${IMG_VXLAN_CONTROLLER}" \
          "${IMG_RUNNER}" \
          "${IMG_SCHEDULER}" \
          "${IMG_AUTOSCALER_AGENT}" \
          "${IMG_CLUSTER_AUTOSCALER}")

          for image in "${images[@]}"; do
            # Remove "neondatabase/" prefix from image name
            image_without_prefix=${image#neondatabase/}

            image_from=${image}:${TAG}
            image_ecr_dev="${ECR_DEV}/${image_without_prefix}:${TAG}"
            image_ecr_prod="${ECR_PROD}/${image_without_prefix}:${TAG}"

            echo "Copy ${image_from} to ${image_ecr_dev} (dev), and ${image_ecr_prod} (prod)"

            docker buildx imagetools create -t ${image_ecr_dev} \
                                            -t ${image_ecr_prod} \
                                               ${image_from}
          done

  push-to-acr-dev:
    if: ${{ format('{0}', inputs.upload-to-ecr-acr) == 'true' }}
    needs: [ merge-images ]
    uses: ./.github/workflows/_push-to-acr.yaml
    with:
      client_id: ${{ vars.AZURE_DEV_CLIENT_ID }}
      image_tag: ${{ inputs.tag }}
      images: neonvm-controller neonvm-vxlan-controller neonvm-runner autoscale-scheduler autoscaler-agent cluster-autoscaler-neonvm
      registry_name: ${{ vars.AZURE_DEV_REGISTRY_NAME }}
      subscription_id: ${{ vars.AZURE_DEV_SUBSCRIPTION_ID }}
      tenant_id: ${{ vars.AZURE_TENANT_ID }}
    secrets: inherit

  push-to-acr-prod:
    if: ${{ format('{0}', inputs.upload-to-ecr-acr) == 'true' }}
    needs: [ merge-images ]
    uses: ./.github/workflows/_push-to-acr.yaml
    with:
      client_id: ${{ vars.AZURE_PROD_CLIENT_ID }}
      images: neonvm-controller neonvm-vxlan-controller neonvm-runner autoscale-scheduler autoscaler-agent cluster-autoscaler-neonvm
      image_tag: ${{ inputs.tag }}
      registry_name: ${{ vars.AZURE_PROD_REGISTRY_NAME }}
      tenant_id: ${{ vars.AZURE_TENANT_ID }}
      subscription_id: ${{ vars.AZURE_PROD_SUBSCRIPTION_ID }}
    secrets: inherit
