name: vm-kernel

on:
  schedule:
    - cron:  '42 4 * * 2'  # run once a week
  workflow_dispatch: # adds ability to run this manually
    inputs:
      push:
        description: 'Push to Docker Hub'
        type: boolean
        default: false
      tag:
        description: 'Tag to use for Docker image'
        type: string
        required: false
      force-rebuild:
        description: 'Rebuild the kernel image even if it already exists'
        type: boolean
        required: false
        default: false
  workflow_call:
    inputs:
      push:
        description: 'Push to Docker Hub'
        type: boolean
        default: false
      tag:
        description: 'Tag to use for Docker image'
        type: string
        required: false
      kernel-image-tag-override:
        description: 'If set, the workflow return the full image name for this tag'
        type: string
        required: false
        default: ''
      force-rebuild:
        description: 'Rebuild the kernel image even if it already exists. No-op if `kernel-image-tag-override` is set'
        type: boolean
        required: false
        default: false
    outputs:
      image:
        description: 'vm-kernel Docker image'
        value: ${{ jobs.check-kernel-image.outputs.image || jobs.vm-kernel.outputs.image }}

env:
  VM_KERNEL_IMAGE: "neondatabase/vm-kernel"

jobs:
  check-kernel-image:
    outputs:
      image: ${{ steps.get-kernel-image.outputs.image }}
      last-kernel-sha: ${{ steps.get-last-kernel-commit-sha.outputs.last-kernel-sha }}

    runs-on: ubuntu-latest

    steps:
      - name: get last kernel commit sha
        id: get-last-kernel-commit-sha
        env:
          COMMIT_SHA: ${{ github.event.pull_request.head.sha || github.sha }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CACHE_TAG=$(
            gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              --method GET \
              --field path=neonvm/hack/kernel \
              --field sha=${COMMIT_SHA} \
              --field per_page=1 \
              --jq ".[0].sha" \
              "/repos/${GITHUB_REPOSITORY}/commits"
          )
          echo "last-kernel-sha=${CACHE_TAG}" >> $GITHUB_OUTPUT

      - name: get kernel image
        id: get-kernel-image
        env:
          OVERRIDE_TAG: ${{ inputs.kernel-image-tag-override }}
          FORCE_REBUILD: ${{ inputs.force-rebuild }}
          CACHE_TAG: ${{ steps.get-last-kernel-commit-sha.outputs.last-kernel-sha }}
        run: |
          if [ -n "${OVERRIDE_TAG}" ]; then
            DIGEST=$(docker manifest inspect ${VM_KERNEL_IMAGE}:${OVERRIDE_TAG} -v | jq -r '.Descriptor.digest')
            IMAGE="${VM_KERNEL_IMAGE}:${OVERRIDE_TAG}@${DIGEST}"
          elif [ "${FORCE_REBUILD}" == "false" ]; then
            CACHE_TAG_DIGEST=$(docker manifest inspect ${VM_KERNEL_IMAGE}:${CACHE_TAG} -v | jq -r '.Descriptor.digest' || true)
            if [ -n "${CACHE_TAG_DIGEST}" ]; then
              IMAGE="${VM_KERNEL_IMAGE}:${CACHE_TAG}@${CACHE_TAG_DIGEST}"
            else
              IMAGE=""
            fi
          elif [ "${FORCE_REBUILD}" == "true" ]; then
            IMAGE=""
          else
            IMAGE=""
          fi

          echo "image=${IMAGE}" >> $GITHUB_OUTPUT

      - name: login to docker hub
        if: |
          steps.get-kernel-image.outputs.image != '' &&
          inputs.tag && !inputs.force-rebuild && !inputs.kernel-image-tag-override
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.NEON_DOCKERHUB_USERNAME }}
          password: ${{ secrets.NEON_DOCKERHUB_PASSWORD }}

      - name: tag image with new tag
        if: |
          steps.get-kernel-image.outputs.image != '' &&
          inputs.tag && !inputs.force-rebuild && !inputs.kernel-image-tag-override
        run: |
          # if we found cached image, tag it with new tag from inputs

          docker pull ${{ steps.get-kernel-image.outputs.image }}
          docker tag ${{ steps.get-kernel-image.outputs.image }} ${VM_KERNEL_IMAGE}:${{ inputs.tag }}
          docker push ${VM_KERNEL_IMAGE}:${{ inputs.tag }}

  vm-kernel:
    needs: check-kernel-image
    if: needs.check-kernel-image.outputs.image == ''
    outputs:
      image: ${{ steps.get-tags.outputs.canonical }}@${{ steps.build-linux-kernel.outputs.digest }}

    runs-on: [ self-hosted, gen3, large ]
    steps:
      - name: git checkout
        uses: actions/checkout@v3

      # Use custom DOCKER_CONFIG directory to avoid conflicts with default settings
      # The default value is ~/.docker
      - name: set custom docker config directory
        run: |
          mkdir -p .docker-custom
          echo DOCKER_CONFIG=$(pwd)/.docker-custom >> $GITHUB_ENV

      - name: docker - install qemu
        uses: docker/setup-qemu-action@v2
      - name: docker - setup buildx
        uses: docker/setup-buildx-action@v2
      - name: login to docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.NEON_DOCKERHUB_USERNAME }}
          password: ${{ secrets.NEON_DOCKERHUB_PASSWORD }}

      - name: get kernel version
        id: get-kernel-version
        run: |
          linux_config=$(ls neonvm/hack/kernel/linux-config-*)  # returns something like "neonvm/hack/kernel/linux-config-6.1.63"
          kernel_version=${linux_config##*-}                    # returns something like "6.1.63"

          echo VM_KERNEL_VERSION=$kernel_version >> $GITHUB_OUTPUT

      - name: get docker tags
        id: get-tags
        env:
          KERNEL_VERSION_TAG: ${{ inputs.tag || steps.get-kernel-version.outputs.VM_KERNEL_VERSION }}
          CACHE_TAG: ${{ needs.check-kernel-image.outputs.last-kernel-sha }}
        run: |
          # A comma-separated list of tags
          TAGS="${VM_KERNEL_IMAGE}:${KERNEL_VERSION_TAG}"
          TAGS="${VM_KERNEL_IMAGE}:${CACHE_TAG},${TAGS}"
          TAGS="${VM_KERNEL_IMAGE}:${GITHUB_RUN_ID},${TAGS}"

          echo "tags=${TAGS}" >> $GITHUB_OUTPUT

          # `docker/build-push-action@v3` returns all ${TAGS} in metadata ("image.name" field), so it can't be used a image name right away.
          # Choose one of them as a "canonical" tag and use it to construct the job output (along with a digest provided by `docker/build-push-action@v3`).
          echo "canonical=${VM_KERNEL_IMAGE}:${GITHUB_RUN_ID}" >> $GITHUB_OUTPUT

      - name: build linux kernel
        id: build-linux-kernel
        uses: docker/build-push-action@v3
        with:
          build-args: KERNEL_VERSION=${{ steps.get-kernel-version.outputs.VM_KERNEL_VERSION }}
          context: neonvm/hack/kernel
          platforms: linux/amd64
          # Push kernel image only for scheduled builds or if workflow_dispatch/workflow_call input is true
          push: ${{ github.event_name == 'schedule' && 'true' || ( inputs.push || 'false' ) }}
          pull: true
          no-cache: true
          file: neonvm/hack/kernel/Dockerfile.kernel-builder
          tags: ${{ steps.get-tags.outputs.tags }}

      - name: remove custom docker config directory
        if: always()
        run: |
          rm -rf .docker-custom
