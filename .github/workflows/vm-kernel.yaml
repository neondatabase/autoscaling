name: vm-kernel

on:
  workflow_dispatch: # adds ability to run this manually
    inputs:
      tag:
        description: 'Tag to use for Docker image'
        type: string
        required: false
      force-rebuild:
        description: 'Rebuild the kernel image even if it already exists'
        type: boolean
        required: false
        default: false
  workflow_call:
    inputs:
      tag:
        description: 'Tag to use for Docker image'
        type: string
        required: false
      return-image-for-tag:
        description: 'Make workflow to return image for the passed tag without building or tagging anything'
        type: string
        required: false
        default: ''
      force-rebuild:
        description: 'Rebuild the kernel image even if it already exists. No-op if `return-image-for-tag` is set'
        type: boolean
        required: false
        default: false
    outputs:
      image:
        description: 'vm-kernel Docker image'
        value: ${{ jobs.setup-build-vm-kernel-image.outputs.image || jobs.build-vm-kernel-image.outputs.image }}

env:
  VM_KERNEL_IMAGE: "neondatabase/vm-kernel"

defaults:
  run:
    shell: bash -euo pipefail {0}

jobs:
  setup-build-vm-kernel-image:
    outputs:
      image: ${{ steps.get-kernel-image.outputs.image }}
      kernel-cache-tag: ${{ steps.get-kernel-cache-tag.outputs.kernel-cache-tag }}

    runs-on: ubuntu-latest

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - uses: actions/checkout@v4

      - name: set kernel cache tag
        id: get-kernel-cache-tag
        env:
          KERNEL_CACHE_TAG: |
            ${{ hashFiles('.github/workflows/vm-kernel.yaml',
                          'neonvm-kernel/**') }}
        run: |
          echo "kernel-cache-tag=${KERNEL_CACHE_TAG}" >> $GITHUB_OUTPUT

      - name: get kernel image
        id: get-kernel-image
        env:
          FORCED_TAG: ${{ inputs.return-image-for-tag }}
          FORCE_REBUILD: ${{ inputs.force-rebuild }}
          CACHE_TAG: ${{ steps.get-kernel-cache-tag.outputs.kernel-cache-tag }}
        run: |
          if [ -n "${FORCED_TAG}" ]; then
            DIGEST=$(docker manifest inspect ${VM_KERNEL_IMAGE}:${FORCED_TAG} -v | jq -r '.Descriptor.digest')
            IMAGE="${VM_KERNEL_IMAGE}:${FORCED_TAG}@${DIGEST}"
          elif [ "${FORCE_REBUILD}" == "false" ]; then
            CACHE_TAG_DIGEST=$(docker manifest inspect ${VM_KERNEL_IMAGE}:${CACHE_TAG} -v | jq -r '.Descriptor.digest' || true)
            if [ -n "${CACHE_TAG_DIGEST}" ]; then
              IMAGE="${VM_KERNEL_IMAGE}:${CACHE_TAG}@${CACHE_TAG_DIGEST}"
            else
              IMAGE=""
            fi
          else
            IMAGE=""
          fi

          echo "image=${IMAGE}" >> $GITHUB_OUTPUT

      - name: check if we need to retag the image
        id: check-if-retag-needed
        env:
          CACHED_IMAGE: ${{ steps.get-kernel-image.outputs.image }}
          FORCE_REBUILD: "${{ inputs.force-rebuild }}"
          FORCED_TAG: ${{ inputs.return-image-for-tag }}
          NEW_TAG: ${{ inputs.tag }}
        run: |
          if [ -z "${NEW_TAG}" ]; then
            # there's no tag provided to retag the image with
            RETAG_NEEDED=false
          elif [ -z "${CACHED_IMAGE}" ]; then
            # there's no image to retag
            RETAG_NEEDED=false
          elif [ -n "${FORCED_TAG}" ]; then
            # we're asked to return image for a specific tag, so no need to retag
            RETAG_NEEDED=false
          elif [ "${FORCE_REBUILD}" == "true" ]; then
            # the image is going to be rebuilt anyway, no need to retag it now
            RETAG_NEEDED=false
          else
            RETAG_NEEDED=true
          fi

          echo "retag-needed=${RETAG_NEEDED}" >> $GITHUB_OUTPUT

      - name: login to docker hub
        if: steps.check-if-retag-needed.outputs.retag-needed == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.NEON_DOCKERHUB_USERNAME }}
          password: ${{ secrets.NEON_DOCKERHUB_PASSWORD }}

      - name: tag image with new tag
        if: steps.check-if-retag-needed.outputs.retag-needed == 'true'
        env:
          CACHED_IMAGE: ${{ steps.get-kernel-image.outputs.image }}
          NEW_TAG: ${{ inputs.tag }}
        run: |
          docker pull ${CACHED_IMAGE}
          docker tag ${CACHED_IMAGE} ${VM_KERNEL_IMAGE}:${NEW_TAG}
          docker push ${VM_KERNEL_IMAGE}:${NEW_TAG}

  build-vm-kernel-image:
    needs: setup-build-vm-kernel-image
    if: needs.setup-build-vm-kernel-image.outputs.image == ''
    outputs:
      image: ${{ steps.get-tags.outputs.canonical }}@${{ steps.build-linux-kernel.outputs.digest }}

    runs-on: [ self-hosted, gen3, large ]
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: git checkout
        uses: actions/checkout@v4

      - name: set custom docker config directory
        uses: neondatabase/dev-actions/set-docker-config-dir@6094485bf440001c94a94a3f9e221e81ff6b6193

      - name: docker - setup buildx
        uses: docker/setup-buildx-action@v3
      - name: login to docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.NEON_DOCKERHUB_USERNAME }}
          password: ${{ secrets.NEON_DOCKERHUB_PASSWORD }}
      - name: Login to Docker cache registry
        uses: docker/login-action@v3
        with:
          registry: cache.neon.build
          username: ${{ secrets.NEON_CI_DOCKERCACHE_USERNAME }}
          password: ${{ secrets.NEON_CI_DOCKERCACHE_PASSWORD }}

      - name: get kernel version
        id: get-kernel-version
        run: |
          linux_config=$(ls neonvm-kernel/linux-config-*)  # returns something like "neonvm-kernel/linux-config-amd64-6.1.63"
          kernel_version=${linux_config##*-}               # returns something like "amd64-6.1.63"

          echo VM_KERNEL_VERSION=$kernel_version >> $GITHUB_OUTPUT

      - name: get docker tags
        id: get-tags
        env:
          KERNEL_VERSION_TAG: ${{ inputs.tag || steps.get-kernel-version.outputs.VM_KERNEL_VERSION }}
          CACHE_TAG: ${{ needs.setup-build-vm-kernel-image.outputs.kernel-cache-tag }}
        run: |
          # A comma-separated list of tags
          TAGS="${VM_KERNEL_IMAGE}:${KERNEL_VERSION_TAG}"
          TAGS="${VM_KERNEL_IMAGE}:${CACHE_TAG},${TAGS}"
          TAGS="${VM_KERNEL_IMAGE}:${GITHUB_RUN_ID},${TAGS}"

          echo "tags=${TAGS}" >> $GITHUB_OUTPUT

          # `docker/build-push-action@v6` returns all ${TAGS} in metadata ("image.name" field), so it can't be used a image name right away.
          # Choose one of them as a "canonical" tag and use it to construct the job output (along with a digest provided by `docker/build-push-action@v6`).
          echo "canonical=${VM_KERNEL_IMAGE}:${GITHUB_RUN_ID}" >> $GITHUB_OUTPUT

      - name: build linux kernel
        id: build-linux-kernel
        uses: docker/build-push-action@v6
        with:
          build-args: KERNEL_VERSION=${{ steps.get-kernel-version.outputs.VM_KERNEL_VERSION }}
          context: neonvm-kernel
          platforms: linux/amd64
          # neonvm-kernel/Dockerfile.kernel-builder has different targets for different architectures
          # so we need to specify the target explicitly
          target: kernel_amd64
          # Push kernel image only for scheduled builds or if workflow_dispatch/workflow_call input is true
          push: true
          pull: true
          file: neonvm-kernel/Dockerfile.kernel-builder
          cache-from: type=registry,ref=cache.neon.build/vm-kernel:cache
          cache-to: ${{ github.ref_name == 'main' && 'type=registry,ref=cache.neon.build/vm-kernel:cache,mode=max' || '' }}
          tags: ${{ steps.get-tags.outputs.tags }}
