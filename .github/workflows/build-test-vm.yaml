name: build-test-vm

on:
  workflow_dispatch: # adds ability to run this manually
    inputs:
      tag:
        description: 'Tag to use for the Docker images'
        type: string
        required: true
  workflow_call:
    inputs:
      skip:
        description: 'Changes this action to perform a no-op'
        type: boolean
        required: false
      tag:
        description: 'Tag to use for the Docker images'
        type: string
        required: true
      upload-vm-builder:
        description: 'If true, upload vm-builder in an artifact'
        type: boolean
        required: false
        default: false
    outputs:
      vm-postgres-16-bullseye-amd64:
        description: 'image name for postgres:16-bullseye, VM-ified'
        value: ${{ jobs.build.outputs.vm-postgres-16-bullseye-amd64 }}
      vm-postgres-16-bullseye-arm64:
        description: 'image name for postgres:16-bullseye, VM-ified'
        value: ${{ jobs.build.outputs.vm-postgres-16-bullseye-arm64 }}
  
env:
  IMG_POSTGRES_16_BULLSEYE: "neondatabase/vm-postgres-16-bullseye"
  # using image built in the same workflow
  IMG_DAEMON: "daemon"

defaults:
  run:
    shell: bash -euo pipefail {0}

jobs:
  
  build:
    # nb: use format(..) to catch both inputs.skip = true AND inputs.skip = 'true'.
    if: ${{ format('{0}', inputs.skip) != 'true' }}
    outputs:
      vm-postgres-16-bullseye-arm64: ${{ steps.tags.outputs.vm-postgres-16-bullseye-arm64 }}
      vm-postgres-16-bullseye-amd64: ${{ steps.tags.outputs.vm-postgres-16-bullseye-amd64 }}
      daemon: ${{ steps.tags.outputs.daemon }}    
    strategy:
      matrix:
        arch: [ amd64, arm64 ]  
    # TODO: do we need gen3 runners? to clarify with dev exp team    
    runs-on: ${{ fromJson(format('["self-hosted", "{0}"]', matrix.arch == 'arm64' && 'large-arm64' || 'large')) }}
    steps:
      # tags converted to be a step and moved here to be in the same strategy contextt
      - id: tags
        run: |
          echo "vm-postgres-16-bullseye-${{matrix.arch}}=${{ env.IMG_POSTGRES_16_BULLSEYE }}-${{matrix.arch}}:${{ inputs.tag }}" | tee -a $GITHUB_OUTPUT
          echo "daemon=${{ env.IMG_DAEMON }}-${{matrix.arch}}:dev" | tee -a $GITHUB_OUTPUT      
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          # Disable cache on self-hosted runners to avoid /usr/bin/tar errors, see https://github.com/actions/setup-go/issues/403
          cache: false
        # Sometimes setup-go gets stuck. Without this, it'll keep going until the job gets killed
        timeout-minutes: 10
      - name: Build daemon image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          platforms: linux/${{ matrix.arch }}
          file: neonvm-daemon/Dockerfile
          cache-from: type=registry,ref=cache.neon.build/neonvm-daemon:cache
          cache-to: ${{ github.ref_name == 'main' && 'type=registry,ref=cache.neon.build/neonvm-daemon:cache,mode=max' || '' }}
          tags: ${{ steps.tags.outputs.daemon }}
      - run: make bin/vm-builder

      - name: upload vm-builder
        if: ${{ format('{0}', inputs.upload-vm-builder) == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: vm-builder
          path: ${{format('bin/vm-builder-{0}', matrix.arch)}}
          if-no-files-found: error
          retention-days: 2

      - name: set custom docker config directory
        uses: ./.github/actions/set-docker-config-dir

      - name: login to docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.NEON_DOCKERHUB_USERNAME }}
          password: ${{ secrets.NEON_DOCKERHUB_PASSWORD }}

      - name: build ${{ steps.tags.outputs[format('vm-postgres-16-bullseye-{0}', matrix.arch)] }}
        run: |
          ./bin/vm-builder -src postgres:16-bullseye -spec tests/e2e/image-spec.yaml -dst ${{ steps.tags.outputs[format('vm-postgres-16-bullseye-{0}', matrix.arch)] }} -daemon-image ${{ steps.tags.outputs.daemon }} -target-arch linux/${{ matrix.arch }}
      - name: docker push ${{ steps.tags.outputs[format('vm-postgres-16-bullseye-{0}', matrix.arch)] }}
        run: |
          docker push ${{ steps.tags.outputs[format('vm-postgres-16-bullseye-{0}', matrix.arch)] }}
