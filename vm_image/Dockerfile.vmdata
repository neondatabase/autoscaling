FROM localhost:5001/vm-informant:latest as informant
# ^ don't do anything with this; we just want it around for later use.

# Build the allocation tester:
FROM alpine:3.16 AS allocate-loop-builder

RUN set -e \
	&& apk add gcc musl-dev

COPY allocate-loop.c allocate-loop.c

RUN set -e \
	&& gcc -g -O allocate-loop.c -o /bin/allocate-loop

FROM alpine:3.16 AS rootfs

# Setup inittab for later use with NeonVM.
RUN set -e \
    && rm -f /etc/inittab \
    && touch /etc/inittab

RUN set -e \
	&& apk add --no-cache \
		ca-certificates \
		util-linux-misc \
        coreutils \
		cgroup-tools

# Configure cgroups on startup
ADD cgconfig.conf /etc/cgconfig.conf
RUN echo '::sysinit:/usr/sbin/cgconfigparser -l /etc/cgconfig.conf -s 1664' >> /etc/inittab

# Add the allocate-loop tester
COPY --from=allocate-loop-builder /bin/allocate-loop /bin/allocate-loop

# Add the vm-informant 
COPY --from=informant /usr/bin/vm-informant /bin/vm-informant
RUN adduser vm-informant --disabled-password --no-create-home
# note: Use 'respawn' and '--auto-restart' so that the logs are noisy if the arguments are bad,
# but we still have proper handling around cgroups, etc.
RUN echo "::respawn:su vm-informant -c '/bin/vm-informant --auto-restart --cgroup=neon-test'" >> /etc/inittab

# postgresql stuff
RUN set -e \
	&& apk add --no-cache \
		su-exec \
		postgresql14
ADD postgresql.conf /etc/postgresql.conf
ADD pg_hba.conf     /etc/pg_hba.conf

RUN echo "::sysinit:sh -c 'mkdir -p /run/postgresql && chown -R postgres:postgres /run/postgresql'" >> /etc/inittab
RUN echo "::once:su postgres -c 'PGDATA=/var/lib/postgresql pg_ctl start -o \"-c config_file=/etc/postgresql.conf -c hba_file=/etc/pg_hba.conf\"'" >> /etc/inittab

# Initialize postgres
ENV PGDATA /var/lib/postgresql
RUN set -e \
    && mkdir -p ${PGDATA} /run/postgresql \
    && chown -R postgres:postgres ${PGDATA} /run/postgresql\
    && su-exec postgres pg_ctl init

# ssh stuff
RUN set -e \
    && apk add --no-cache \
        openssh-server
ADD sshd_config /etc/ssh/sshd_config
ADD ssh_id_rsa.pub /etc/ssh/authorized_keys
# 'authorized_keys' needs to have the right mode bits, otherwise it'll get ignored by sshd
RUN set -e \
    && chmod 600 /etc/ssh/authorized_keys
ADD generate-sshd-keys.sh /bin/generate-sshd-keys.sh
RUN echo '::sysinit:/bin/generate-sshd-keys.sh' >> /etc/inittab
RUN echo '::respawn:setsid -w /usr/sbin/sshd -D -E /run/sshd/log -h /run/sshd/ssh_host_ecdsa_key -h /run/sshd/ssh_host_ed25519_key -h /run/sshd/ssh_host_rsa_key' >> /etc/inittab
# Having trouble with ssh? Add -dd to the ssh args.

# set the greeting message on ssh logins
RUN echo -e 'Welcome to Alpine!\n ~ This is the VM :) ~' >/etc/motd
