apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller
  namespace: system
  labels:
    control-plane: controller
    app.kubernetes.io/name: deployment
    app.kubernetes.io/instance: controller
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: neonvm
    app.kubernetes.io/part-of: neonvm
    app.kubernetes.io/managed-by: kustomize
spec:
  selector:
    matchLabels:
      control-plane: controller
  replicas: 3
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                    - amd64
                    - arm64
                    - ppc64le
                    - s390x
                - key: kubernetes.io/os
                  operator: In
                  values:
                    - linux
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: manager
        image: controller:dev
        command:
        - /manager
        args:
        - "--health-probe-bind-address=:8081"
        - "--metrics-bind-address=:8080"
        - "--leader-elect"
        - "--concurrency-limit=128"
        - "--enable-container-mgr"
        - "--zap-devel=false"
        - "--zap-time-encoding=iso8601"
        - "--zap-log-level=info"
        - "--zap-stacktrace-level=panic"
        # See #775 and its links.
        # * cache.writeback=on - don't set O_DSYNC (don't flush every write)
        # * cache.direct=on    - use O_DIRECT (don't abuse host's page cache!)
        # * cache.no-flush=on  - ignores disk flush operations (not needed; our disks are ephemeral)
        - "--qemu-disk-cache-settings=cache.writeback=on,cache.direct=on,cache.no-flush=on"
        env:
        - name: NAD_IPAM_NAME
          value: $(NAD_IPAM_NAME)
        - name: NAD_IPAM_NAMESPACE
          value: $(NAD_IPAM_NAMESPACE)
        - name: NAD_RUNNER_NAME
          value: $(NAD_RUNNER_NAME)
        - name: NAD_RUNNER_NAMESPACE
          value: $(NAD_RUNNER_NAMESPACE)
        ports:
        - name: metrics
          containerPort: 8080
          protocol: TCP
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - "ALL"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 8
            memory: 2Gi
          requests:
            cpu: 2
            memory: 1Gi
      - name: kube-rbac-proxy
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - "ALL"
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.0
        args:
        - "--secure-listen-address=0.0.0.0:8443"
        - "--upstream=http://127.0.0.1:8080/"
        - "--logtostderr=true"
        - "--v=0"
        ports:
        - containerPort: 8443
          protocol: TCP
          name: https
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
      serviceAccountName: controller
      terminationGracePeriodSeconds: 10
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: webhook-server-cert
