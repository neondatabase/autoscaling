// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	qmp "github.com/neondatabase/autoscaling/neonvm/qmp"
	mock "github.com/stretchr/testify/mock"
	resource "k8s.io/apimachinery/pkg/api/resource"

	v1 "github.com/neondatabase/autoscaling/neonvm/apis/neonvm/v1"
)

// QMPMonitor is an autogenerated mock type for the QMPMonitor type
type QMPMonitor struct {
	mock.Mock
}

// CPUs provides a mock function with given fields:
func (_m *QMPMonitor) CPUs() ([]qmp.CPUSlot, []qmp.CPUSlot, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CPUs")
	}

	var r0 []qmp.CPUSlot
	var r1 []qmp.CPUSlot
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]qmp.CPUSlot, []qmp.CPUSlot, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []qmp.CPUSlot); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]qmp.CPUSlot)
		}
	}

	if rf, ok := ret.Get(1).(func() []qmp.CPUSlot); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]qmp.CPUSlot)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Close provides a mock function with given fields:
func (_m *QMPMonitor) Close() {
	_m.Called()
}

// MemoryDevices provides a mock function with given fields:
func (_m *QMPMonitor) MemoryDevices() ([]qmp.MemoryDevice, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MemoryDevices")
	}

	var r0 []qmp.MemoryDevice
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]qmp.MemoryDevice, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []qmp.MemoryDevice); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]qmp.MemoryDevice)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MemorySize provides a mock function with given fields:
func (_m *QMPMonitor) MemorySize() (*resource.Quantity, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MemorySize")
	}

	var r0 *resource.Quantity
	var r1 error
	if rf, ok := ret.Get(0).(func() (*resource.Quantity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *resource.Quantity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resource.Quantity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlugCPU provides a mock function with given fields:
func (_m *QMPMonitor) PlugCPU() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PlugCPU")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetVirtioMem provides a mock function with given fields: vm, targetVirtioMemSize
func (_m *QMPMonitor) SetVirtioMem(vm *v1.VirtualMachine, targetVirtioMemSize int64) (int64, error) {
	ret := _m.Called(vm, targetVirtioMemSize)

	if len(ret) == 0 {
		panic("no return value specified for SetVirtioMem")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1.VirtualMachine, int64) (int64, error)); ok {
		return rf(vm, targetVirtioMemSize)
	}
	if rf, ok := ret.Get(0).(func(*v1.VirtualMachine, int64) int64); ok {
		r0 = rf(vm, targetVirtioMemSize)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*v1.VirtualMachine, int64) error); ok {
		r1 = rf(vm, targetVirtioMemSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnplugCPU provides a mock function with given fields:
func (_m *QMPMonitor) UnplugCPU() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UnplugCPU")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQMPMonitor creates a new instance of QMPMonitor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQMPMonitor(t interface {
	mock.TestingT
	Cleanup(func())
}) *QMPMonitor {
	mock := &QMPMonitor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
