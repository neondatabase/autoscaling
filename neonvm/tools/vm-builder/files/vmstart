#!/neonvm/bin/sh

/neonvm/bin/cat <<'EOF' >/neonvm/bin/vmstarter.sh
{{ range .Env }}
export {{.}}
{{- end }}
EOF

if /neonvm/bin/test -f /neonvm/runtime/env.sh; then
    /neonvm/bin/cat /neonvm/runtime/env.sh >>/neonvm/bin/vmstarter.sh
fi

{{if or .Entrypoint .Cmd | not}}
# If we have no arguments *at all*, then emit an error. This matches docker's behavior.
if /neonvm/bin/test \( ! -f /neonvm/runtime/command.sh \) -a \( ! -f /neonvm/runtime/args.sh \); then
	/neonvm/bin/echo 'Error: No command specified' >&2
	exit 1
fi
{{end}}

{{/* command.sh is set by the runner with the contents of the VM's spec.guest.command, if it's set */}}
if /neonvm/bin/test -f /neonvm/runtime/command.sh; then
    /neonvm/bin/cat /neonvm/runtime/command.sh >>/neonvm/bin/vmstarter.sh
else
    {{/*
	A couple notes:
	  - .Entrypoint is already shell-escaped twice (everything is quoted)
	  - the shell-escaping isn't perfect. In particular, it doesn't handle backslashes well.
	  - It's good enough for now
	*/}}
    /neonvm/bin/echo -n {{range .Entrypoint}}' '{{.}}{{end}} >> /neonvm/bin/vmstarter.sh
fi

{{/* args.sh is set by the runner with the contents of the VM's spec.guest.args, if it's set */}}
if /neonvm/bin/test -f /neonvm/runtime/args.sh; then
    /neonvm/bin/echo -n ' ' >>/neonvm/bin/vmstarter.sh
    /neonvm/bin/cat /neonvm/runtime/args.sh >>/neonvm/bin/vmstarter.sh
else
    {{/* Same as with .Entrypoint; refer there. We don't have '-n' because we want a trailing newline */}}
    /neonvm/bin/echo -n {{range .Cmd}}' '{{.}}{{end}} >> /neonvm/bin/vmstarter.sh
fi

/neonvm/bin/chmod +x /neonvm/bin/vmstarter.sh

/neonvm/bin/flock -o /neonvm/vmstart.lock -c 'test -e /neonvm/vmstart.allowed && /neonvm/bin/su-exec {{.User}} /neonvm/bin/sh /neonvm/bin/vmstarter.sh'
